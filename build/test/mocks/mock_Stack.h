/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_STACK_H
#define _MOCK_STACK_H

#include "Stack.h"

void mock_Stack_Init(void);
void mock_Stack_Destroy(void);
void mock_Stack_Verify(void);




#define stackNew_IgnoreAndReturn(cmock_retval) stackNew_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void stackNew_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, Stack* cmock_to_return);
#define stackNew_ExpectAndReturn(cmock_retval) stackNew_CMockExpectAndReturn(__LINE__, cmock_retval)
void stackNew_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Stack* cmock_to_return);
typedef Stack* (* CMOCK_stackNew_CALLBACK)(int cmock_num_calls);
void stackNew_StubWithCallback(CMOCK_stackNew_CALLBACK Callback);
#define push_Ignore() push_CMockIgnore()
void push_CMockIgnore(void);
#define push_Expect(data, stack) push_CMockExpect(__LINE__, data, stack)
void push_CMockExpect(UNITY_LINE_TYPE cmock_line, void* data, Stack* stack);
typedef void (* CMOCK_push_CALLBACK)(void* data, Stack* stack, int cmock_num_calls);
void push_StubWithCallback(CMOCK_push_CALLBACK Callback);
#define pop_IgnoreAndReturn(cmock_retval) pop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define pop_ExpectAndReturn(stack, cmock_retval) pop_CMockExpectAndReturn(__LINE__, stack, cmock_retval)
void pop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Stack* stack, void* cmock_to_return);
typedef void* (* CMOCK_pop_CALLBACK)(Stack* stack, int cmock_num_calls);
void pop_StubWithCallback(CMOCK_pop_CALLBACK Callback);

#endif
